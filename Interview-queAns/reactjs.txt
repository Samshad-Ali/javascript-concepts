------------------------------------------------ REACTJS QUE-ANS ---------------------------------------------

Q: What is React?
A: React is a JavaScript library for building user interfaces, primarily for single-page applications. It allows developers to create reusable UI components.

Q: What are components in React?
A: Components are the building blocks of a React application. They can be either class components or functional components, and they encapsulate a portion of the UI and its behavior.

Q: What is JSX?
A: JSX stands for JavaScript XML. It is a syntax extension for JavaScript that looks similar to XML or HTML and is used to describe what the UI should look like in React.

Q: What is the difference between class components and functional components?
A: Class components are ES6 classes that extend React.Component and have access to lifecycle methods and this.state. Functional components are simple functions that return JSX and can use hooks for state and lifecycle features.

Q: What are props in React?
A: Props (short for properties) are read-only attributes passed from parent to child components to pass data and event handlers. They allow component reusability.

Q: What is state in React?
A: State is an object that holds data that influences the output of a component. Unlike props, state is managed within the component and can change over time.

Q: How do you handle events in React?
A: Events in React are handled using camelCase syntax and passing functions as event handlers. Example:

jsx
Copy code
<button onClick={handleClick}>Click me</button>
Q: What is the purpose of the key attribute in React?
A: The key attribute is used to uniquely identify elements in a list and helps React optimize re-rendering by keeping track of which items have changed.

Q: What are React hooks?
A: Hooks are functions that let you use state and other React features in functional components. Common hooks include useState, useEffect, and useContext.

Q: How do you use the useState hook?
A: The useState hook is used to add state to a functional component. Example:

jsx
Copy code
const [count, setCount] = useState(0);
Q: What is the useEffect hook used for?
A: The useEffect hook is used to perform side effects in functional components, such as data fetching, subscriptions, and manually changing the DOM.

Q: What is the virtual DOM in React?
A: The virtual DOM is an in-memory representation of the real DOM elements generated by React components. React uses the virtual DOM to efficiently update the real DOM by minimizing changes.

Q: What are higher-order components (HOCs)?
A: HOCs are functions that take a component and return a new component with added props or behavior. They are used to reuse component logic.

Q: What is the context API in React?
A: The context API is used to share data across the component tree without passing props down manually at every level. It is used for global state management.

Q: How do you create a context in React?
A: Use React.createContext to create a context. Example:

jsx
Copy code
const MyContext = React.createContext();
Q: What is React Router?
A: React Router is a library for handling routing in React applications, allowing navigation between different components/views in a single-page application.

Q: How do you use useContext hook?
A: The useContext hook is used to access the value of a context in a functional component. Example:

jsx
Copy code
const value = useContext(MyContext);
Q: What is the difference between componentDidMount and useEffect?
A: componentDidMount is a lifecycle method in class components that runs after the component is mounted, while useEffect is a hook in functional components that can run after every render, optionally depending on certain values.

Q: How do you optimize performance in a React application?
A: Performance can be optimized by using techniques such as memoization with React.memo, useMemo, and useCallback, code-splitting with React.lazy and Suspense, and optimizing re-renders by using key properly and avoiding inline functions/objects.

Q: What is the difference between controlled and uncontrolled components?
A: Controlled components have their state managed by React, typically using useState or this.state. Uncontrolled components manage their own state internally and use refs to access DOM elements.

Q: How do you handle form submissions in React?
A: Handle form submissions by attaching an onSubmit event handler to the form element and using event.preventDefault to prevent the default form submission behavior.

Q: What is the purpose of React.Fragment?
A: React.Fragment allows you to group multiple elements without adding extra nodes to the DOM. It is useful for returning multiple children from a component.

Q: How do you conditionally render components in React?
A: Conditional rendering can be done using JavaScript conditional operators like if, ternary operators, or logical &&. Example:

jsx
Copy code
{isLoggedIn ? <LogoutButton /> : <LoginButton />}
Q: What is PropTypes in React?
A: PropTypes is a library for type-checking props passed to components. It ensures that components receive the correct props of the correct type.

Q: How do you handle errors in React components?
A: Errors in React components can be handled using error boundaries, which are components that catch JavaScript errors anywhere in their child component tree and display a fallback UI.

Q: What is the difference between useCallback and useMemo?
A: useCallback returns a memoized callback function, while useMemo returns a memoized value. Both are used to optimize performance by preventing unnecessary re-renders.

Q: How do you create a ref in React?
A: You can create a ref using React.createRef in class components or the useRef hook in functional components. Example with useRef:

jsx
Copy code
const myRef = useRef(null);
Q: What is server-side rendering (SSR) in React?
A: Server-side rendering is the process of rendering a React application on the server and sending the fully rendered HTML to the client, improving performance and SEO.

Q: What are React portals?
A: React portals provide a way to render children into a DOM node outside the parent component's DOM hierarchy. Example:

jsx
Copy code
ReactDOM.createPortal(<Child />, document.getElementById('portal-root'));
Q: What is the purpose of useReducer hook?
A: The useReducer hook is used for state management in complex state logic scenarios. It is an alternative to useState and works similarly to Redux reducers. Example:

jsx
Copy code
const [state, dispatch] = useReducer(reducer, initialState);